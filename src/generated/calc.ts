/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.4-330
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';


// Services

export interface CalcDef {
    add: (n: number, callParams: CallParams<'n'>) => void | Promise<void>;
    divide: (n: number, callParams: CallParams<'n'>) => void | Promise<void>;
    getResult: (callParams: CallParams<null>) => number | Promise<number>;
    multiply: (n: number, callParams: CallParams<'n'>) => void | Promise<void>;
    reset: (callParams: CallParams<null>) => void | Promise<void>;
    subtract: (n: number, callParams: CallParams<'n'>) => void | Promise<void>;
}
export function registerCalc(service: CalcDef): void;
export function registerCalc(serviceId: string, service: CalcDef): void;
export function registerCalc(peer: FluencePeer, service: CalcDef): void;
export function registerCalc(peer: FluencePeer, serviceId: string, service: CalcDef): void;
       

export function registerCalc(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "calc",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "add" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "n" : {
                            "tag" : "scalar",
                            "name" : "f32"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "nil"
                }
            },
            "divide" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "n" : {
                            "tag" : "scalar",
                            "name" : "f32"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "nil"
                }
            },
            "getResult" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "f32"
                        }
                    ]
                }
            },
            "multiply" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "n" : {
                            "tag" : "scalar",
                            "name" : "f32"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "nil"
                }
            },
            "reset" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "nil"
                }
            },
            "subtract" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "n" : {
                            "tag" : "scalar",
                            "name" : "f32"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "nil"
                }
            }
        }
    }
}
    );
}
      
// Functions

